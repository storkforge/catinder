package org.example.springboot25.config;

import org.example.springboot25.entities.User;
import org.example.springboot25.enums.Role;
import org.example.springboot25.repository.UserRepository;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService;
import org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;
import org.springframework.security.oauth2.client.userinfo.OAuth2UserService;
import org.springframework.security.oauth2.core.user.DefaultOAuth2User;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

import java.util.Collections;
import java.util.List;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/", "/css/**", "/images/**", "/js/**").permitAll()
                .requestMatchers("/admin/**").hasRole("ADMIN")
                .requestMatchers("/premium/**").hasRole("PREMIUM")
                .requestMatchers("/posts/**", "/reminders/**", "/recommendations/**").hasAnyRole("BASIC", "PREMIUM", "ADMIN")
                .anyRequest().authenticated()
            )
            .oauth2Login(Customizer.withDefaults())
            .logout(logout -> logout.logoutSuccessUrl("/"))

        return http.build();
    }

    /**
     * Replace this with real logic if users are stored in DB
     */
    @Bean
    public UserDetailsService userDetailsService(UserRepository userRepository) {
        return username -> {
            User user = userRepository.findByUserName(username)
                    .orElseThrow(() -> new RuntimeException("User not found"));
            return org.springframework.security.core.userdetails.User
                    .withUsername(user.getUserName())
                    .password(user.getPassword()) // Endast om du anv√§nder password login
                    .authorities("ROLE_" + user.getUserRole().name())
                    .build();
        };
    }

    /**
     * Optional: Custom OAuth2UserService if we want to save Google/Facebook users in DB
     */
    @Bean
    public OAuth2UserService<OAuth2UserRequest, OAuth2User> oauth2UserService(UserRepository userRepository) {
        return request -> {
            OAuth2User oauthUser = new DefaultOAuth2UserService().loadUser(request);

            String email = oauthUser.getAttribute("email");
            User user = userRepository.findByUserEmail(email)
                    .orElseGet(() -> {
                        // Create new user in DB if not exists
                        User newUser = new User();
                        newUser.setUserEmail(email);
                        newUser.setUserName(email.split("@")[0]);
                        newUser.setUserRole(Role.BASIC); // Default to BASIC
                        return userRepository.save(newUser);
                    });

            return new DefaultOAuth2User(
                    List.of(new SimpleGrantedAuthority("ROLE_" + user.getUserRole().name())),
                    oauthUser.getAttributes(),
                    "email"
            );
        };
    }
}
